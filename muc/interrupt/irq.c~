/*
    irq.c - irq core functions
    Copyright (C) 2007  Ch. Klippel <ck@mamalala.net>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "lpc2220.h"
#include "irq.h"
#include "i2c.h"

#define IRQ_MASK 0x000000C0

extern unsigned char bl_val, cmp_val;



static inline unsigned asm_get_cpsr(void)
{
  unsigned long retval;
  asm volatile (" mrs  %0, cpsr" : "=r" (retval) : /* no inputs */  );
  return retval;
}

static inline void asm_set_cpsr(unsigned val)
{
  asm volatile (" msr  cpsr, %0" : /* no outputs */ : "r" (val)  );
}

unsigned int enableIRQ(void)
{
	unsigned _cpsr;

	_cpsr = asm_get_cpsr();
	asm_set_cpsr(_cpsr & ~IRQ_MASK);
	return _cpsr;
}

#if 0
static inline __attribute__ ((section(".text.fastcode"))) unsigned asm_get_cpsr_(void)
{
	unsigned long retval;
	asm volatile (" mrs  %0, cpsr" : "=r" (retval) : /* no inputs */  );
	return retval;
}

static inline __attribute__ ((section(".text.fastcode"))) void asm_set_cpsr_(unsigned val)
{
	asm volatile (" msr  cpsr, %0" : /* no outputs */ : "r" (val)  );
}


unsigned int disableIRQ(void)
{
  unsigned _cpsr;

  _cpsr = asm_get_cpsr();
  asm_set_cpsr(_cpsr | IRQ_MASK);
  return _cpsr;
}

unsigned __attribute__ ((section(".text.fastcode"))) enableIRQ_(void)
{
	unsigned _cpsr;

	_cpsr = asm_get_cpsr_();
	asm_set_cpsr_(_cpsr & ~IRQ_MASK);
	return _cpsr;
}

unsigned __attribute__ ((section(".text.fastcode"))) disableIRQ_(void)
{
	unsigned _cpsr;

	_cpsr = asm_get_cpsr_();
	asm_set_cpsr_(_cpsr | IRQ_MASK);
	return _cpsr;
}

unsigned int restoreIRQ(unsigned oldCPSR)
{
  unsigned _cpsr;

  _cpsr = asm_get_cpsr();
  asm_set_cpsr((_cpsr & ~IRQ_MASK) | (oldCPSR & IRQ_MASK));
  return _cpsr;
}

static unsigned long oldVIC;

void disableVIC () {
	oldVIC = VICIntEnable;	// save current value 
	VICIntEnClr = ~0;	// disable all interrupts
};
	
void enableVIC () {
	VICIntEnClr = ~0;	// just to make sure 
	VICIntEnable = oldVIC;
};

void __attribute__ ((section(".text.fastcode"))) disableVIC_ () {
	oldVIC = VICIntEnable;	// save current value 
	VICIntEnClr = ~0;	// disable all interrupts
};
	
void __attribute__ ((section(".text.fastcode"))) enableVIC_ () {
	VICIntEnClr = ~0;	// just to make sure 
	VICIntEnable = oldVIC;
};
		
void __attribute__ ((section(".text.fastcode"))) FIQ_Routine (void)  {
		
	while ((PWMIR == 0x01) || (T1IR == 1)) {
//		if (PWMIR == 0x01)
//			soundIRQ();
//		if (T1IR == 1)
//			irIRQ();
	}
}

#endif

void SWI_Routine (void)  {
	while (1) ;	
}


void UNDEF_Routine (void) {
	while (1) ;	
}


