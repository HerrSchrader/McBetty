                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.7 #5820 (May  6 2010) (Linux)
                              4 ; This file was generated Sun Dec 26 12:20:46 2010
                              5 ;--------------------------------------------------------
                              6 	.module cc1100
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _conf
                             13 	.globl _cc1100_tx_finished
                             14 	.globl _TCR20_0
                             15 	.globl _TCR20_1
                             16 	.globl _TCR20_2
                             17 	.globl _TCR20_3
                             18 	.globl _TCR20_4
                             19 	.globl _TCR20_5
                             20 	.globl _TCR20_6
                             21 	.globl _TCR20_7
                             22 	.globl _P3_0
                             23 	.globl _P3_1
                             24 	.globl _P2_0
                             25 	.globl _P2_1
                             26 	.globl _P2_2
                             27 	.globl _P2_3
                             28 	.globl _P2_4
                             29 	.globl _P2_5
                             30 	.globl _P2_6
                             31 	.globl _P2_7
                             32 	.globl _P1_0
                             33 	.globl _P1_1
                             34 	.globl _P1_2
                             35 	.globl _P1_3
                             36 	.globl _P1_4
                             37 	.globl _P1_5
                             38 	.globl _P1_6
                             39 	.globl _P1_7
                             40 	.globl _P0_0
                             41 	.globl _P0_1
                             42 	.globl _P0_2
                             43 	.globl _P0_3
                             44 	.globl _P0_4
                             45 	.globl _P0_5
                             46 	.globl _P0_6
                             47 	.globl _P0_7
                             48 	.globl _I2CON_0
                             49 	.globl _I2CON_2
                             50 	.globl _I2CON_3
                             51 	.globl _I2CON_4
                             52 	.globl _I2CON_5
                             53 	.globl _I2CON_6
                             54 	.globl _SCON_0
                             55 	.globl _SCON_1
                             56 	.globl _SCON_2
                             57 	.globl _SCON_3
                             58 	.globl _SCON_4
                             59 	.globl _SCON_5
                             60 	.globl _SCON_6
                             61 	.globl _SCON_7
                             62 	.globl _IP0_0
                             63 	.globl _IP0_1
                             64 	.globl _IP0_2
                             65 	.globl _IP0_3
                             66 	.globl _IP0_4
                             67 	.globl _IP0_5
                             68 	.globl _IP0_6
                             69 	.globl _IEN1_0
                             70 	.globl _IEN1_1
                             71 	.globl _IEN1_2
                             72 	.globl _IEN1_3
                             73 	.globl _IEN1_4
                             74 	.globl _IEN1_6
                             75 	.globl _IEN1_7
                             76 	.globl _IEN0_0
                             77 	.globl _IEN0_1
                             78 	.globl _IEN0_2
                             79 	.globl _IEN0_3
                             80 	.globl _IEN0_4
                             81 	.globl _IEN0_5
                             82 	.globl _IEN0_6
                             83 	.globl _IEN0_7
                             84 	.globl _TCON_0
                             85 	.globl _TCON_1
                             86 	.globl _TCON_2
                             87 	.globl _TCON_3
                             88 	.globl _TCON_4
                             89 	.globl _TCON_5
                             90 	.globl _TCON_6
                             91 	.globl _TCON_7
                             92 	.globl _PSW_0
                             93 	.globl _PSW_1
                             94 	.globl _PSW_2
                             95 	.globl _PSW_3
                             96 	.globl _PSW_4
                             97 	.globl _PSW_5
                             98 	.globl _PSW_6
                             99 	.globl _PSW_7
                            100 	.globl _IP0H
                            101 	.globl _WFEED2
                            102 	.globl _WFEED1
                            103 	.globl _WDL
                            104 	.globl _WDCON
                            105 	.globl _TRIM
                            106 	.globl _TPCR2L
                            107 	.globl _TPCR2H
                            108 	.globl _TOR2L
                            109 	.globl _TOR2H
                            110 	.globl _TISE2
                            111 	.globl _TIFR2
                            112 	.globl _TICR2
                            113 	.globl _TCR21
                            114 	.globl _TCR20
                            115 	.globl _TAMOD
                            116 	.globl _SPDAT
                            117 	.globl _SPSTAT
                            118 	.globl _SPCTL
                            119 	.globl _SSTAT
                            120 	.globl _RTCL
                            121 	.globl _RTCH
                            122 	.globl _RTCCON
                            123 	.globl _RSTSRC
                            124 	.globl _PT0AD
                            125 	.globl _PCONA
                            126 	.globl _P3M2
                            127 	.globl _P3M1
                            128 	.globl _P2M2
                            129 	.globl _P2M1
                            130 	.globl _P1M2
                            131 	.globl _P1M1
                            132 	.globl _P0M2
                            133 	.globl _P0M1
                            134 	.globl _OCRDL
                            135 	.globl _OCRDH
                            136 	.globl _OCRCL
                            137 	.globl _OCRCH
                            138 	.globl _OCRBL
                            139 	.globl _OCRBH
                            140 	.globl _OCRAL
                            141 	.globl _OCRAH
                            142 	.globl _KBPATN
                            143 	.globl _KBMASK
                            144 	.globl _KBCON
                            145 	.globl _IP1H
                            146 	.globl _IP1
                            147 	.globl _IEN1
                            148 	.globl _ICRBL
                            149 	.globl _ICRBH
                            150 	.globl _ICRAL
                            151 	.globl _ICRAH
                            152 	.globl _I2STAT
                            153 	.globl _I2SCLL
                            154 	.globl _I2SCLH
                            155 	.globl _I2DAT
                            156 	.globl _I2CON
                            157 	.globl _I2ADR
                            158 	.globl _DIVM
                            159 	.globl _DEEADR
                            160 	.globl _DEEDAT
                            161 	.globl _DEECON
                            162 	.globl _CMP2
                            163 	.globl _CMP1
                            164 	.globl _CCCRD
                            165 	.globl _CCCRC
                            166 	.globl _CCCRB
                            167 	.globl _CCCRA
                            168 	.globl _BRGCON
                            169 	.globl _BRGR1
                            170 	.globl _BRGR0
                            171 	.globl _TH2
                            172 	.globl _TL2
                            173 	.globl _SADEN
                            174 	.globl _SADDR
                            175 	.globl _AUXR1
                            176 	.globl _SBUF
                            177 	.globl _SCON
                            178 	.globl _IP0
                            179 	.globl _IEN0
                            180 	.globl _TH1
                            181 	.globl _TH0
                            182 	.globl _TL1
                            183 	.globl _TL0
                            184 	.globl _TMOD
                            185 	.globl _TCON
                            186 	.globl _PCON
                            187 	.globl _DPH
                            188 	.globl _DPL
                            189 	.globl _SP
                            190 	.globl _B
                            191 	.globl _ACC
                            192 	.globl _PSW
                            193 	.globl _P3
                            194 	.globl _P2
                            195 	.globl _P1
                            196 	.globl _P0
                            197 	.globl _cc1100_read_PARM_3
                            198 	.globl _cc1100_read_PARM_2
                            199 	.globl _cc1100_write1_PARM_2
                            200 	.globl _cc1100_write_PARM_3
                            201 	.globl _cc1100_write_PARM_2
                            202 	.globl _spi_rw
                            203 	.globl _cc1100_init
                            204 	.globl _cc1100_write
                            205 	.globl _cc1100_write1
                            206 	.globl _cc1100_read
                            207 	.globl _cc1100_read1
                            208 	.globl _cc1100_strobe
                            209 	.globl _cc1100_read_status_reg_otf
                            210 	.globl _switch_to_idle
                            211 ;--------------------------------------------------------
                            212 ; special function registers
                            213 ;--------------------------------------------------------
                            214 	.area RSEG    (ABS,DATA)
   0000                     215 	.org 0x0000
                    0080    216 _P0	=	0x0080
                    0090    217 _P1	=	0x0090
                    00A0    218 _P2	=	0x00a0
                    00B0    219 _P3	=	0x00b0
                    00D0    220 _PSW	=	0x00d0
                    00E0    221 _ACC	=	0x00e0
                    00F0    222 _B	=	0x00f0
                    0081    223 _SP	=	0x0081
                    0082    224 _DPL	=	0x0082
                    0083    225 _DPH	=	0x0083
                    0087    226 _PCON	=	0x0087
                    0088    227 _TCON	=	0x0088
                    0089    228 _TMOD	=	0x0089
                    008A    229 _TL0	=	0x008a
                    008B    230 _TL1	=	0x008b
                    008C    231 _TH0	=	0x008c
                    008D    232 _TH1	=	0x008d
                    00A8    233 _IEN0	=	0x00a8
                    00B8    234 _IP0	=	0x00b8
                    0098    235 _SCON	=	0x0098
                    0099    236 _SBUF	=	0x0099
                    00A2    237 _AUXR1	=	0x00a2
                    00A9    238 _SADDR	=	0x00a9
                    00B9    239 _SADEN	=	0x00b9
                    00CC    240 _TL2	=	0x00cc
                    00CD    241 _TH2	=	0x00cd
                    00BE    242 _BRGR0	=	0x00be
                    00BF    243 _BRGR1	=	0x00bf
                    00BD    244 _BRGCON	=	0x00bd
                    00EA    245 _CCCRA	=	0x00ea
                    00EB    246 _CCCRB	=	0x00eb
                    00EC    247 _CCCRC	=	0x00ec
                    00ED    248 _CCCRD	=	0x00ed
                    00AC    249 _CMP1	=	0x00ac
                    00AD    250 _CMP2	=	0x00ad
                    00F1    251 _DEECON	=	0x00f1
                    00F2    252 _DEEDAT	=	0x00f2
                    00F3    253 _DEEADR	=	0x00f3
                    0095    254 _DIVM	=	0x0095
                    00DB    255 _I2ADR	=	0x00db
                    00D8    256 _I2CON	=	0x00d8
                    00DA    257 _I2DAT	=	0x00da
                    00DD    258 _I2SCLH	=	0x00dd
                    00DC    259 _I2SCLL	=	0x00dc
                    00D9    260 _I2STAT	=	0x00d9
                    00AB    261 _ICRAH	=	0x00ab
                    00AA    262 _ICRAL	=	0x00aa
                    00AF    263 _ICRBH	=	0x00af
                    00AE    264 _ICRBL	=	0x00ae
                    00E8    265 _IEN1	=	0x00e8
                    00F8    266 _IP1	=	0x00f8
                    00F7    267 _IP1H	=	0x00f7
                    0094    268 _KBCON	=	0x0094
                    0086    269 _KBMASK	=	0x0086
                    0093    270 _KBPATN	=	0x0093
                    00EF    271 _OCRAH	=	0x00ef
                    00EE    272 _OCRAL	=	0x00ee
                    00FB    273 _OCRBH	=	0x00fb
                    00FA    274 _OCRBL	=	0x00fa
                    00FD    275 _OCRCH	=	0x00fd
                    00FC    276 _OCRCL	=	0x00fc
                    00FF    277 _OCRDH	=	0x00ff
                    00FE    278 _OCRDL	=	0x00fe
                    0084    279 _P0M1	=	0x0084
                    0085    280 _P0M2	=	0x0085
                    0091    281 _P1M1	=	0x0091
                    0092    282 _P1M2	=	0x0092
                    00A4    283 _P2M1	=	0x00a4
                    00A5    284 _P2M2	=	0x00a5
                    00B1    285 _P3M1	=	0x00b1
                    00B2    286 _P3M2	=	0x00b2
                    00B5    287 _PCONA	=	0x00b5
                    00F6    288 _PT0AD	=	0x00f6
                    00DF    289 _RSTSRC	=	0x00df
                    00D1    290 _RTCCON	=	0x00d1
                    00D2    291 _RTCH	=	0x00d2
                    00D3    292 _RTCL	=	0x00d3
                    00BA    293 _SSTAT	=	0x00ba
                    00E2    294 _SPCTL	=	0x00e2
                    00E1    295 _SPSTAT	=	0x00e1
                    00E3    296 _SPDAT	=	0x00e3
                    008F    297 _TAMOD	=	0x008f
                    00C8    298 _TCR20	=	0x00c8
                    00F9    299 _TCR21	=	0x00f9
                    00C9    300 _TICR2	=	0x00c9
                    00E9    301 _TIFR2	=	0x00e9
                    00DE    302 _TISE2	=	0x00de
                    00CF    303 _TOR2H	=	0x00cf
                    00CE    304 _TOR2L	=	0x00ce
                    00CB    305 _TPCR2H	=	0x00cb
                    00CA    306 _TPCR2L	=	0x00ca
                    0096    307 _TRIM	=	0x0096
                    00A7    308 _WDCON	=	0x00a7
                    00C1    309 _WDL	=	0x00c1
                    00C2    310 _WFEED1	=	0x00c2
                    00C3    311 _WFEED2	=	0x00c3
                    00B7    312 _IP0H	=	0x00b7
                            313 ;--------------------------------------------------------
                            314 ; special function bits
                            315 ;--------------------------------------------------------
                            316 	.area RSEG    (ABS,DATA)
   0000                     317 	.org 0x0000
                    00D7    318 _PSW_7	=	0x00d7
                    00D6    319 _PSW_6	=	0x00d6
                    00D5    320 _PSW_5	=	0x00d5
                    00D4    321 _PSW_4	=	0x00d4
                    00D3    322 _PSW_3	=	0x00d3
                    00D2    323 _PSW_2	=	0x00d2
                    00D1    324 _PSW_1	=	0x00d1
                    00D0    325 _PSW_0	=	0x00d0
                    008F    326 _TCON_7	=	0x008f
                    008E    327 _TCON_6	=	0x008e
                    008D    328 _TCON_5	=	0x008d
                    008C    329 _TCON_4	=	0x008c
                    008B    330 _TCON_3	=	0x008b
                    008A    331 _TCON_2	=	0x008a
                    0089    332 _TCON_1	=	0x0089
                    0088    333 _TCON_0	=	0x0088
                    00AF    334 _IEN0_7	=	0x00af
                    00AE    335 _IEN0_6	=	0x00ae
                    00AD    336 _IEN0_5	=	0x00ad
                    00AC    337 _IEN0_4	=	0x00ac
                    00AB    338 _IEN0_3	=	0x00ab
                    00AA    339 _IEN0_2	=	0x00aa
                    00A9    340 _IEN0_1	=	0x00a9
                    00A8    341 _IEN0_0	=	0x00a8
                    00EF    342 _IEN1_7	=	0x00ef
                    00EE    343 _IEN1_6	=	0x00ee
                    00EC    344 _IEN1_4	=	0x00ec
                    00EB    345 _IEN1_3	=	0x00eb
                    00EA    346 _IEN1_2	=	0x00ea
                    00E9    347 _IEN1_1	=	0x00e9
                    00E8    348 _IEN1_0	=	0x00e8
                    00BE    349 _IP0_6	=	0x00be
                    00BD    350 _IP0_5	=	0x00bd
                    00BC    351 _IP0_4	=	0x00bc
                    00BB    352 _IP0_3	=	0x00bb
                    00BA    353 _IP0_2	=	0x00ba
                    00B9    354 _IP0_1	=	0x00b9
                    00B8    355 _IP0_0	=	0x00b8
                    009F    356 _SCON_7	=	0x009f
                    009E    357 _SCON_6	=	0x009e
                    009D    358 _SCON_5	=	0x009d
                    009C    359 _SCON_4	=	0x009c
                    009B    360 _SCON_3	=	0x009b
                    009A    361 _SCON_2	=	0x009a
                    0099    362 _SCON_1	=	0x0099
                    0098    363 _SCON_0	=	0x0098
                    00DE    364 _I2CON_6	=	0x00de
                    00DD    365 _I2CON_5	=	0x00dd
                    00DC    366 _I2CON_4	=	0x00dc
                    00DB    367 _I2CON_3	=	0x00db
                    00DA    368 _I2CON_2	=	0x00da
                    00D8    369 _I2CON_0	=	0x00d8
                    0087    370 _P0_7	=	0x0087
                    0086    371 _P0_6	=	0x0086
                    0085    372 _P0_5	=	0x0085
                    0084    373 _P0_4	=	0x0084
                    0083    374 _P0_3	=	0x0083
                    0082    375 _P0_2	=	0x0082
                    0081    376 _P0_1	=	0x0081
                    0080    377 _P0_0	=	0x0080
                    0097    378 _P1_7	=	0x0097
                    0096    379 _P1_6	=	0x0096
                    0095    380 _P1_5	=	0x0095
                    0094    381 _P1_4	=	0x0094
                    0093    382 _P1_3	=	0x0093
                    0092    383 _P1_2	=	0x0092
                    0091    384 _P1_1	=	0x0091
                    0090    385 _P1_0	=	0x0090
                    00A7    386 _P2_7	=	0x00a7
                    00A6    387 _P2_6	=	0x00a6
                    00A5    388 _P2_5	=	0x00a5
                    00A4    389 _P2_4	=	0x00a4
                    00A3    390 _P2_3	=	0x00a3
                    00A2    391 _P2_2	=	0x00a2
                    00A1    392 _P2_1	=	0x00a1
                    00A0    393 _P2_0	=	0x00a0
                    00B1    394 _P3_1	=	0x00b1
                    00B0    395 _P3_0	=	0x00b0
                    00CF    396 _TCR20_7	=	0x00cf
                    00CE    397 _TCR20_6	=	0x00ce
                    00CD    398 _TCR20_5	=	0x00cd
                    00CC    399 _TCR20_4	=	0x00cc
                    00CB    400 _TCR20_3	=	0x00cb
                    00CA    401 _TCR20_2	=	0x00ca
                    00C9    402 _TCR20_1	=	0x00c9
                    00C8    403 _TCR20_0	=	0x00c8
                            404 ;--------------------------------------------------------
                            405 ; overlayable register banks
                            406 ;--------------------------------------------------------
                            407 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     408 	.ds 8
                            409 ;--------------------------------------------------------
                            410 ; internal ram data
                            411 ;--------------------------------------------------------
                            412 	.area DSEG    (DATA)
   0014                     413 _cc1100_write_PARM_2:
   0014                     414 	.ds 3
   0017                     415 _cc1100_write_PARM_3:
   0017                     416 	.ds 1
   0018                     417 _cc1100_write1_PARM_2:
   0018                     418 	.ds 1
   0019                     419 _cc1100_read_PARM_2:
   0019                     420 	.ds 3
   001C                     421 _cc1100_read_PARM_3:
   001C                     422 	.ds 1
                            423 ;--------------------------------------------------------
                            424 ; overlayable items in internal ram 
                            425 ;--------------------------------------------------------
                            426 	.area	OSEG    (OVR,DATA)
                            427 ;--------------------------------------------------------
                            428 ; indirectly addressable internal ram data
                            429 ;--------------------------------------------------------
                            430 	.area ISEG    (DATA)
                            431 ;--------------------------------------------------------
                            432 ; absolute internal ram data
                            433 ;--------------------------------------------------------
                            434 	.area IABS    (ABS,DATA)
                            435 	.area IABS    (ABS,DATA)
                            436 ;--------------------------------------------------------
                            437 ; bit data
                            438 ;--------------------------------------------------------
                            439 	.area BSEG    (BIT)
                            440 ;--------------------------------------------------------
                            441 ; paged external ram data
                            442 ;--------------------------------------------------------
                            443 	.area PSEG    (PAG,XDATA)
                            444 ;--------------------------------------------------------
                            445 ; external ram data
                            446 ;--------------------------------------------------------
                            447 	.area XSEG    (XDATA)
                            448 ;--------------------------------------------------------
                            449 ; absolute external ram data
                            450 ;--------------------------------------------------------
                            451 	.area XABS    (ABS,XDATA)
                            452 ;--------------------------------------------------------
                            453 ; external initialized ram data
                            454 ;--------------------------------------------------------
                            455 	.area XISEG   (XDATA)
                            456 	.area HOME    (CODE)
                            457 	.area GSINIT0 (CODE)
                            458 	.area GSINIT1 (CODE)
                            459 	.area GSINIT2 (CODE)
                            460 	.area GSINIT3 (CODE)
                            461 	.area GSINIT4 (CODE)
                            462 	.area GSINIT5 (CODE)
                            463 	.area GSINIT  (CODE)
                            464 	.area GSFINAL (CODE)
                            465 	.area CSEG    (CODE)
                            466 ;--------------------------------------------------------
                            467 ; global & static initialisations
                            468 ;--------------------------------------------------------
                            469 	.area HOME    (CODE)
                            470 	.area GSINIT  (CODE)
                            471 	.area GSFINAL (CODE)
                            472 	.area GSINIT  (CODE)
                            473 ;--------------------------------------------------------
                            474 ; Home
                            475 ;--------------------------------------------------------
                            476 	.area HOME    (CODE)
                            477 	.area HOME    (CODE)
                            478 ;--------------------------------------------------------
                            479 ; code
                            480 ;--------------------------------------------------------
                            481 	.area CSEG    (CODE)
                            482 ;------------------------------------------------------------
                            483 ;Allocation info for local variables in function 'spi_rw'
                            484 ;------------------------------------------------------------
                            485 ;write                     Allocated to registers r2 
                            486 ;z                         Allocated to registers r3 
                            487 ;------------------------------------------------------------
                            488 ;	cc1100.c:114: unsigned char spi_rw(unsigned char write) {
                            489 ;	-----------------------------------------
                            490 ;	 function spi_rw
                            491 ;	-----------------------------------------
   03FB                     492 _spi_rw:
                    0002    493 	ar2 = 0x02
                    0003    494 	ar3 = 0x03
                    0004    495 	ar4 = 0x04
                    0005    496 	ar5 = 0x05
                    0006    497 	ar6 = 0x06
                    0007    498 	ar7 = 0x07
                    0000    499 	ar0 = 0x00
                    0001    500 	ar1 = 0x01
   03FB AA 82               501 	mov	r2,dpl
                            502 ;	cc1100.c:118: for (z= 8; z > 0; z--) {
   03FD 7B 08               503 	mov	r3,#0x08
   03FF                     504 00106$:
   03FF EB                  505 	mov	a,r3
   0400 60 04               506 	jz	00112$
   0402 7C 01               507 	mov	r4,#0x01
   0404 80 02               508 	sjmp	00113$
   0406                     509 00112$:
   0406 7C 00               510 	mov	r4,#0x00
   0408                     511 00113$:
   0408 EC                  512 	mov	a,r4
   0409 60 16               513 	jz	00109$
                            514 ;	cc1100.c:119: SCK = 0;
   040B C2 97               515 	clr	_P1_7
                            516 ;	cc1100.c:120: if (write & 0x80)
   040D EA                  517 	mov	a,r2
   040E 30 E7 04            518 	jnb	acc.7,00102$
                            519 ;	cc1100.c:121: MOSI1 = 1;
   0411 D2 96               520 	setb	_P1_6
   0413 80 02               521 	sjmp	00103$
   0415                     522 00102$:
                            523 ;	cc1100.c:123: MOSI1 = 0;
   0415 C2 96               524 	clr	_P1_6
   0417                     525 00103$:
                            526 ;	cc1100.c:124: SCK = 1;
   0417 D2 97               527 	setb	_P1_7
                            528 ;	cc1100.c:125: write <<=1;
                            529 ;	cc1100.c:126: if (MISO1)
                            530 ;	cc1100.c:127: write |= 0x01;
   0419 EA                  531 	mov	a,r2
   041A A2 95               532 	mov	c,_P1_5
   041C 3A                  533 	addc	a,r2
   041D FA                  534 	mov	r2,a
                            535 ;	cc1100.c:118: for (z= 8; z > 0; z--) {
   041E 1B                  536 	dec	r3
   041F 80 DE               537 	sjmp	00106$
   0421                     538 00109$:
                            539 ;	cc1100.c:129: SCK = 0;
   0421 C2 97               540 	clr	_P1_7
                            541 ;	cc1100.c:131: return(write);  
   0423 8A 82               542 	mov	dpl,r2
   0425 22                  543 	ret
                            544 ;------------------------------------------------------------
                            545 ;Allocation info for local variables in function 'cc1100_init'
                            546 ;------------------------------------------------------------
                            547 ;i                         Allocated to registers r2 
                            548 ;------------------------------------------------------------
                            549 ;	cc1100.c:135: void cc1100_init(void) {
                            550 ;	-----------------------------------------
                            551 ;	 function cc1100_init
                            552 ;	-----------------------------------------
   0426                     553 _cc1100_init:
                            554 ;	cc1100.c:139: SCK = 1;
   0426 D2 97               555 	setb	_P1_7
                            556 ;	cc1100.c:140: MOSI1 = 0;
   0428 C2 96               557 	clr	_P1_6
                            558 ;	cc1100.c:141: CS = 0;
   042A C2 81               559 	clr	_P0_1
                            560 ;	cc1100.c:142: while(i) {
   042C 7A FF               561 	mov	r2,#0xFF
   042E                     562 00101$:
   042E EA                  563 	mov	a,r2
   042F 60 03               564 	jz	00103$
                            565 ;	cc1100.c:143: i--;
   0431 1A                  566 	dec	r2
   0432 80 FA               567 	sjmp	00101$
   0434                     568 00103$:
                            569 ;	cc1100.c:145: CS = 1;
   0434 D2 81               570 	setb	_P0_1
                            571 ;	cc1100.c:147: while(i) {
   0436 7A FF               572 	mov	r2,#0xFF
   0438                     573 00104$:
   0438 EA                  574 	mov	a,r2
   0439 60 03               575 	jz	00106$
                            576 ;	cc1100.c:148: i--;
   043B 1A                  577 	dec	r2
   043C 80 FA               578 	sjmp	00104$
   043E                     579 00106$:
                            580 ;	cc1100.c:150: CS = 0;
   043E C2 81               581 	clr	_P0_1
                            582 ;	cc1100.c:151: SCK = 0; 
   0440 C2 97               583 	clr	_P1_7
                            584 ;	cc1100.c:152: while (MISO1);  
   0442                     585 00107$:
   0442 20 95 FD            586 	jb	_P1_5,00107$
                            587 ;	cc1100.c:153: spi_rw(SRES);
   0445 75 82 30            588 	mov	dpl,#0x30
   0448 12 03 FB            589 	lcall	_spi_rw
                            590 ;	cc1100.c:154: while (MISO1);
   044B                     591 00110$:
   044B 20 95 FD            592 	jb	_P1_5,00110$
                            593 ;	cc1100.c:156: cc1100_write(0x00, conf, 0x2f);
   044E 75 14 F7            594 	mov	_cc1100_write_PARM_2,#_conf
   0451 75 15 05            595 	mov	(_cc1100_write_PARM_2 + 1),#(_conf >> 8)
   0454 75 16 80            596 	mov	(_cc1100_write_PARM_2 + 2),#0x80
   0457 75 17 2F            597 	mov	_cc1100_write_PARM_3,#0x2F
   045A 75 82 00            598 	mov	dpl,#0x00
   045D 12 04 69            599 	lcall	_cc1100_write
                            600 ;	cc1100.c:157: cc1100_write1(PATABLE, PA_VALUE);	
   0460 75 18 60            601 	mov	_cc1100_write1_PARM_2,#0x60
   0463 75 82 3E            602 	mov	dpl,#0x3E
   0466 02 04 AA            603 	ljmp	_cc1100_write1
                            604 ;------------------------------------------------------------
                            605 ;Allocation info for local variables in function 'cc1100_write'
                            606 ;------------------------------------------------------------
                            607 ;dat                       Allocated with name '_cc1100_write_PARM_2'
                            608 ;length                    Allocated with name '_cc1100_write_PARM_3'
                            609 ;addr                      Allocated to registers r2 
                            610 ;i                         Allocated to registers r3 
                            611 ;status                    Allocated to registers r2 
                            612 ;------------------------------------------------------------
                            613 ;	cc1100.c:161: unsigned char cc1100_write(unsigned char addr, unsigned char* dat, unsigned char length) {
                            614 ;	-----------------------------------------
                            615 ;	 function cc1100_write
                            616 ;	-----------------------------------------
   0469                     617 _cc1100_write:
   0469 AA 82               618 	mov	r2,dpl
                            619 ;	cc1100.c:166: CS = 0;
   046B C2 81               620 	clr	_P0_1
                            621 ;	cc1100.c:167: while (MISO1);
   046D                     622 00101$:
   046D 20 95 FD            623 	jb	_P1_5,00101$
                            624 ;	cc1100.c:168: status = spi_rw(addr | WRITE | BURST);
   0470 74 40               625 	mov	a,#0x40
   0472 4A                  626 	orl	a,r2
   0473 F5 82               627 	mov	dpl,a
   0475 12 03 FB            628 	lcall	_spi_rw
   0478 AA 82               629 	mov	r2,dpl
                            630 ;	cc1100.c:169: for (i=0; i < length; i++) 
   047A 7B 00               631 	mov	r3,#0x00
   047C                     632 00104$:
   047C C3                  633 	clr	c
   047D EB                  634 	mov	a,r3
   047E 95 17               635 	subb	a,_cc1100_write_PARM_3
   0480 50 23               636 	jnc	00107$
                            637 ;	cc1100.c:170: spi_rw(dat[i]); 
   0482 EB                  638 	mov	a,r3
   0483 25 14               639 	add	a,_cc1100_write_PARM_2
   0485 FC                  640 	mov	r4,a
   0486 E4                  641 	clr	a
   0487 35 15               642 	addc	a,(_cc1100_write_PARM_2 + 1)
   0489 FD                  643 	mov	r5,a
   048A AE 16               644 	mov	r6,(_cc1100_write_PARM_2 + 2)
   048C 8C 82               645 	mov	dpl,r4
   048E 8D 83               646 	mov	dph,r5
   0490 8E F0               647 	mov	b,r6
   0492 12 05 D7            648 	lcall	__gptrget
   0495 F5 82               649 	mov	dpl,a
   0497 C0 02               650 	push	ar2
   0499 C0 03               651 	push	ar3
   049B 12 03 FB            652 	lcall	_spi_rw
   049E D0 03               653 	pop	ar3
   04A0 D0 02               654 	pop	ar2
                            655 ;	cc1100.c:169: for (i=0; i < length; i++) 
   04A2 0B                  656 	inc	r3
   04A3 80 D7               657 	sjmp	00104$
   04A5                     658 00107$:
                            659 ;	cc1100.c:171: CS = 1;
   04A5 D2 81               660 	setb	_P0_1
                            661 ;	cc1100.c:173: return(status);
   04A7 8A 82               662 	mov	dpl,r2
   04A9 22                  663 	ret
                            664 ;------------------------------------------------------------
                            665 ;Allocation info for local variables in function 'cc1100_write1'
                            666 ;------------------------------------------------------------
                            667 ;dat                       Allocated with name '_cc1100_write1_PARM_2'
                            668 ;addr                      Allocated to registers r2 
                            669 ;status                    Allocated to registers r2 
                            670 ;------------------------------------------------------------
                            671 ;	cc1100.c:176: unsigned char cc1100_write1(unsigned char addr,unsigned char dat) {
                            672 ;	-----------------------------------------
                            673 ;	 function cc1100_write1
                            674 ;	-----------------------------------------
   04AA                     675 _cc1100_write1:
   04AA AA 82               676 	mov	r2,dpl
                            677 ;	cc1100.c:180: CS = 0;
   04AC C2 81               678 	clr	_P0_1
                            679 ;	cc1100.c:181: while (MISO1);
   04AE                     680 00101$:
   04AE 20 95 FD            681 	jb	_P1_5,00101$
                            682 ;	cc1100.c:182: status = spi_rw(addr | WRITE); 
   04B1 8A 82               683 	mov	dpl,r2
   04B3 12 03 FB            684 	lcall	_spi_rw
   04B6 AA 82               685 	mov	r2,dpl
                            686 ;	cc1100.c:183: spi_rw(dat); 
   04B8 85 18 82            687 	mov	dpl,_cc1100_write1_PARM_2
   04BB C0 02               688 	push	ar2
   04BD 12 03 FB            689 	lcall	_spi_rw
   04C0 D0 02               690 	pop	ar2
                            691 ;	cc1100.c:184: CS = 1;
   04C2 D2 81               692 	setb	_P0_1
                            693 ;	cc1100.c:186: return(status);
   04C4 8A 82               694 	mov	dpl,r2
   04C6 22                  695 	ret
                            696 ;------------------------------------------------------------
                            697 ;Allocation info for local variables in function 'cc1100_read'
                            698 ;------------------------------------------------------------
                            699 ;dat                       Allocated with name '_cc1100_read_PARM_2'
                            700 ;length                    Allocated with name '_cc1100_read_PARM_3'
                            701 ;addr                      Allocated to registers r2 
                            702 ;i                         Allocated to registers r3 
                            703 ;status                    Allocated to registers r2 
                            704 ;------------------------------------------------------------
                            705 ;	cc1100.c:189: unsigned char cc1100_read(unsigned char addr, unsigned char* dat, unsigned char length) {
                            706 ;	-----------------------------------------
                            707 ;	 function cc1100_read
                            708 ;	-----------------------------------------
   04C7                     709 _cc1100_read:
   04C7 AA 82               710 	mov	r2,dpl
                            711 ;	cc1100.c:194: CS = 0;
   04C9 C2 81               712 	clr	_P0_1
                            713 ;	cc1100.c:195: while (MISO1);
   04CB                     714 00101$:
   04CB 20 95 FD            715 	jb	_P1_5,00101$
                            716 ;	cc1100.c:196: status = spi_rw(addr | READ);
   04CE 74 80               717 	mov	a,#0x80
   04D0 4A                  718 	orl	a,r2
   04D1 F5 82               719 	mov	dpl,a
   04D3 12 03 FB            720 	lcall	_spi_rw
   04D6 AA 82               721 	mov	r2,dpl
                            722 ;	cc1100.c:197: for (i=0; i < length; i++)
   04D8 7B 00               723 	mov	r3,#0x00
   04DA                     724 00104$:
   04DA C3                  725 	clr	c
   04DB EB                  726 	mov	a,r3
   04DC 95 1C               727 	subb	a,_cc1100_read_PARM_3
   04DE 50 33               728 	jnc	00107$
                            729 ;	cc1100.c:198: dat[i]=spi_rw(0x00);
   04E0 EB                  730 	mov	a,r3
   04E1 25 19               731 	add	a,_cc1100_read_PARM_2
   04E3 FC                  732 	mov	r4,a
   04E4 E4                  733 	clr	a
   04E5 35 1A               734 	addc	a,(_cc1100_read_PARM_2 + 1)
   04E7 FD                  735 	mov	r5,a
   04E8 AE 1B               736 	mov	r6,(_cc1100_read_PARM_2 + 2)
   04EA 75 82 00            737 	mov	dpl,#0x00
   04ED C0 02               738 	push	ar2
   04EF C0 03               739 	push	ar3
   04F1 C0 04               740 	push	ar4
   04F3 C0 05               741 	push	ar5
   04F5 C0 06               742 	push	ar6
   04F7 12 03 FB            743 	lcall	_spi_rw
   04FA AF 82               744 	mov	r7,dpl
   04FC D0 06               745 	pop	ar6
   04FE D0 05               746 	pop	ar5
   0500 D0 04               747 	pop	ar4
   0502 D0 03               748 	pop	ar3
   0504 D0 02               749 	pop	ar2
   0506 8C 82               750 	mov	dpl,r4
   0508 8D 83               751 	mov	dph,r5
   050A 8E F0               752 	mov	b,r6
   050C EF                  753 	mov	a,r7
   050D 12 05 BE            754 	lcall	__gptrput
                            755 ;	cc1100.c:197: for (i=0; i < length; i++)
   0510 0B                  756 	inc	r3
   0511 80 C7               757 	sjmp	00104$
   0513                     758 00107$:
                            759 ;	cc1100.c:199: CS = 1;
   0513 D2 81               760 	setb	_P0_1
                            761 ;	cc1100.c:201: return(status);
   0515 8A 82               762 	mov	dpl,r2
   0517 22                  763 	ret
                            764 ;------------------------------------------------------------
                            765 ;Allocation info for local variables in function 'cc1100_read1'
                            766 ;------------------------------------------------------------
                            767 ;addr                      Allocated to registers r2 
                            768 ;r                         Allocated to registers 
                            769 ;------------------------------------------------------------
                            770 ;	cc1100.c:204: unsigned char cc1100_read1(unsigned char addr) {
                            771 ;	-----------------------------------------
                            772 ;	 function cc1100_read1
                            773 ;	-----------------------------------------
   0518                     774 _cc1100_read1:
   0518 AA 82               775 	mov	r2,dpl
                            776 ;	cc1100.c:208: CS = 0;
   051A C2 81               777 	clr	_P0_1
                            778 ;	cc1100.c:209: while (MISO1);
   051C                     779 00101$:
   051C 20 95 FD            780 	jb	_P1_5,00101$
                            781 ;	cc1100.c:210: r = spi_rw(addr | READ);
   051F 74 80               782 	mov	a,#0x80
   0521 4A                  783 	orl	a,r2
   0522 F5 82               784 	mov	dpl,a
   0524 12 03 FB            785 	lcall	_spi_rw
                            786 ;	cc1100.c:211: r=spi_rw(0x00);
   0527 75 82 00            787 	mov	dpl,#0x00
   052A 12 03 FB            788 	lcall	_spi_rw
                            789 ;	cc1100.c:212: CS = 1;
   052D D2 81               790 	setb	_P0_1
                            791 ;	cc1100.c:214: return(r);
   052F 22                  792 	ret
                            793 ;------------------------------------------------------------
                            794 ;Allocation info for local variables in function 'cc1100_strobe'
                            795 ;------------------------------------------------------------
                            796 ;cmd                       Allocated to registers r2 
                            797 ;status                    Allocated to registers 
                            798 ;------------------------------------------------------------
                            799 ;	cc1100.c:217: unsigned char cc1100_strobe(unsigned char cmd) {
                            800 ;	-----------------------------------------
                            801 ;	 function cc1100_strobe
                            802 ;	-----------------------------------------
   0530                     803 _cc1100_strobe:
   0530 AA 82               804 	mov	r2,dpl
                            805 ;	cc1100.c:221: CS = 0;
   0532 C2 81               806 	clr	_P0_1
                            807 ;	cc1100.c:222: while (MISO1);
   0534                     808 00101$:
   0534 20 95 FD            809 	jb	_P1_5,00101$
                            810 ;	cc1100.c:223: status = spi_rw(cmd);
   0537 8A 82               811 	mov	dpl,r2
   0539 12 03 FB            812 	lcall	_spi_rw
                            813 ;	cc1100.c:224: CS = 1;
   053C D2 81               814 	setb	_P0_1
                            815 ;	cc1100.c:226: return(status);
   053E 22                  816 	ret
                            817 ;------------------------------------------------------------
                            818 ;Allocation info for local variables in function 'cc1100_read_status_reg_otf'
                            819 ;------------------------------------------------------------
                            820 ;reg                       Allocated to registers r2 
                            821 ;res1                      Allocated to registers r3 
                            822 ;res2                      Allocated to registers r5 
                            823 ;------------------------------------------------------------
                            824 ;	cc1100.c:233: unsigned char cc1100_read_status_reg_otf(unsigned char reg){
                            825 ;	-----------------------------------------
                            826 ;	 function cc1100_read_status_reg_otf
                            827 ;	-----------------------------------------
   053F                     828 _cc1100_read_status_reg_otf:
   053F AA 82               829 	mov	r2,dpl
                            830 ;	cc1100.c:236: res1 = cc1100_read1(reg | BURST);
   0541 74 40               831 	mov	a,#0x40
   0543 4A                  832 	orl	a,r2
   0544 F5 82               833 	mov	dpl,a
   0546 C0 02               834 	push	ar2
   0548 12 05 18            835 	lcall	_cc1100_read1
   054B AB 82               836 	mov	r3,dpl
   054D D0 02               837 	pop	ar2
                            838 ;	cc1100.c:237: while ( (res2=cc1100_read1(reg | BURST)) != res1)
   054F 43 02 40            839 	orl	ar2,#0x40
   0552                     840 00101$:
   0552 8A 82               841 	mov	dpl,r2
   0554 C0 02               842 	push	ar2
   0556 C0 03               843 	push	ar3
   0558 12 05 18            844 	lcall	_cc1100_read1
   055B AC 82               845 	mov	r4,dpl
   055D D0 03               846 	pop	ar3
   055F D0 02               847 	pop	ar2
   0561 EC                  848 	mov	a,r4
   0562 FD                  849 	mov	r5,a
   0563 B5 03 02            850 	cjne	a,ar3,00108$
   0566 80 04               851 	sjmp	00103$
   0568                     852 00108$:
                            853 ;	cc1100.c:238: res1 = res2;
   0568 8D 03               854 	mov	ar3,r5
   056A 80 E6               855 	sjmp	00101$
   056C                     856 00103$:
                            857 ;	cc1100.c:239: return res2;
   056C 8D 82               858 	mov	dpl,r5
   056E 22                  859 	ret
                            860 ;------------------------------------------------------------
                            861 ;Allocation info for local variables in function 'switch_to_idle'
                            862 ;------------------------------------------------------------
                            863 ;------------------------------------------------------------
                            864 ;	cc1100.c:246: void switch_to_idle() {
                            865 ;	-----------------------------------------
                            866 ;	 function switch_to_idle
                            867 ;	-----------------------------------------
   056F                     868 _switch_to_idle:
                            869 ;	cc1100.c:247: cc1100_strobe(SIDLE);
   056F 75 82 36            870 	mov	dpl,#0x36
   0572 12 05 30            871 	lcall	_cc1100_strobe
                            872 ;	cc1100.c:248: while (cc1100_state() != MARCSTATE_IDLE);
   0575                     873 00101$:
   0575 75 82 F5            874 	mov	dpl,#0xF5
   0578 12 05 3F            875 	lcall	_cc1100_read_status_reg_otf
   057B E5 82               876 	mov	a,dpl
   057D 54 1F               877 	anl	a,#0x1F
   057F FA                  878 	mov	r2,a
   0580 BA 01 F2            879 	cjne	r2,#0x01,00101$
   0583 22                  880 	ret
                            881 ;------------------------------------------------------------
                            882 ;Allocation info for local variables in function 'cc1100_tx_finished'
                            883 ;------------------------------------------------------------
                            884 ;s                         Allocated to registers r2 
                            885 ;------------------------------------------------------------
                            886 ;	cc1100.c:258: unsigned char cc1100_tx_finished(){
                            887 ;	-----------------------------------------
                            888 ;	 function cc1100_tx_finished
                            889 ;	-----------------------------------------
   0584                     890 _cc1100_tx_finished:
                            891 ;	cc1100.c:261: s = cc1100_state();
   0584 75 82 F5            892 	mov	dpl,#0xF5
   0587 12 05 3F            893 	lcall	_cc1100_read_status_reg_otf
   058A E5 82               894 	mov	a,dpl
   058C 54 1F               895 	anl	a,#0x1F
   058E FA                  896 	mov	r2,a
                            897 ;	cc1100.c:262: return ( (s == MARCSTATE_IDLE ) || (s == MARCSTATE_RX) || (s == MARCSTATE_RXFIFO_OVERFLOW) 
   058F BA 01 02            898 	cjne	r2,#0x01,00118$
   0592 80 09               899 	sjmp	00110$
   0594                     900 00118$:
   0594 BA 0D 02            901 	cjne	r2,#0x0D,00119$
   0597 80 04               902 	sjmp	00110$
   0599                     903 00119$:
   0599 7B 00               904 	mov	r3,#0x00
   059B 80 02               905 	sjmp	00111$
   059D                     906 00110$:
   059D 7B 01               907 	mov	r3,#0x01
   059F                     908 00111$:
   059F EB                  909 	mov	a,r3
   05A0 70 09               910 	jnz	00107$
   05A2 BA 11 02            911 	cjne	r2,#0x11,00121$
   05A5 80 04               912 	sjmp	00107$
   05A7                     913 00121$:
   05A7 7B 00               914 	mov	r3,#0x00
   05A9 80 02               915 	sjmp	00108$
   05AB                     916 00107$:
   05AB 7B 01               917 	mov	r3,#0x01
   05AD                     918 00108$:
   05AD EB                  919 	mov	a,r3
   05AE 70 09               920 	jnz	00104$
                            921 ;	cc1100.c:263: || (s == MARCSTATE_TXFIFO_UNDERFLOW)
   05B0 BA 16 02            922 	cjne	r2,#0x16,00123$
   05B3 80 04               923 	sjmp	00104$
   05B5                     924 00123$:
   05B5 7A 00               925 	mov	r2,#0x00
   05B7 80 02               926 	sjmp	00105$
   05B9                     927 00104$:
   05B9 7A 01               928 	mov	r2,#0x01
   05BB                     929 00105$:
   05BB 8A 82               930 	mov	dpl,r2
   05BD 22                  931 	ret
                            932 	.area CSEG    (CODE)
                            933 	.area CONST   (CODE)
   05F7                     934 _conf:
   05F7 06                  935 	.db #0x06	; 6
   05F8 2E                  936 	.db #0x2E	; 46
   05F9 07                  937 	.db #0x07	; 7
   05FA 00                  938 	.db #0x00	; 0
   05FB D3                  939 	.db #0xD3	; 211
   05FC 91                  940 	.db #0x91	; 145
   05FD FF                  941 	.db #0xFF	; 255
   05FE 0E                  942 	.db #0x0E	; 14
   05FF 05                  943 	.db #0x05	; 5
   0600 01                  944 	.db #0x01	; 1
   0601 06                  945 	.db #0x06	; 6
   0602 08                  946 	.db #0x08	; 8
   0603 00                  947 	.db #0x00	; 0
   0604 10                  948 	.db #0x10	; 16
   0605 09                  949 	.db #0x09	; 9
   0606 F4                  950 	.db #0xF4	; 244
   0607 CA                  951 	.db #0xCA	; 202
   0608 75                  952 	.db #0x75	; 117	u
   0609 83                  953 	.db #0x83	; 131
   060A 31                  954 	.db #0x31	; 49
   060B E5                  955 	.db #0xE5	; 229
   060C 34                  956 	.db #0x34	; 52
   060D 07                  957 	.db #0x07	; 7
   060E 00                  958 	.db #0x00	; 0
   060F 18                  959 	.db #0x18	; 24
   0610 16                  960 	.db #0x16	; 22
   0611 6C                  961 	.db #0x6C	; 108	l
   0612 43                  962 	.db #0x43	; 67	C
   0613 40                  963 	.db #0x40	; 64
   0614 91                  964 	.db #0x91	; 145
   0615 46                  965 	.db #0x46	; 70	F
   0616 50                  966 	.db #0x50	; 80	P
   0617 78                  967 	.db #0x78	; 120	x
   0618 56                  968 	.db #0x56	; 86	V
   0619 10                  969 	.db #0x10	; 16
   061A E9                  970 	.db #0xE9	; 233
   061B 2A                  971 	.db #0x2A	; 42
   061C 00                  972 	.db #0x00	; 0
   061D 1F                  973 	.db #0x1F	; 31
   061E 41                  974 	.db #0x41	; 65	A
   061F 00                  975 	.db #0x00	; 0
   0620 59                  976 	.db #0x59	; 89	Y
   0621 7F                  977 	.db #0x7F	; 127
   0622 3F                  978 	.db #0x3F	; 63
   0623 81                  979 	.db #0x81	; 129
   0624 35                  980 	.db #0x35	; 53
   0625 09                  981 	.db #0x09	; 9
                            982 	.area XINIT   (CODE)
                            983 	.area CABS    (ABS,CODE)
